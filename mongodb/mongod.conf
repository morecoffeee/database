

## Config 항목 대략 정리 ( /etc/mongod.conf )
# mongod.conf

# for documentation of all options, see:
#   http://docs.mongodb.org/manual/reference/configuration-options/

# where to write logging data.
systemLog:
  destination: file
  logAppend: true    #true : 존재하는 파일의 end 부터 다시 작성 / false : 존재하는 파일 백업하고 새로운 로그파일 작성
  path: /var/log/mongodb/mongod.log

# Where and how to store data.
storage:  -> 스토리지 엔진 공통 영역의 설정
  dbPath: /var/lib/mongo  
#데이터베이스 파일이 저장된 경로 (Data 디렉토리) MongoDB 서버는 저널 로그나 oplog가 모두 이 디렉토리의 하위에 저장된다. 만약 저널 로그나 oplog를 다른 디스크나 파티션에 저장하고자 할 때는 디렉토리 단위로 심볼릭 링크를 사용하는 것이 좋다. oplog를 분리하고자 할 때에는 directoryPerDB 옵션을 true로 설정해서 데이터베이스 단위로 디렉토리가 생성되게 하는것이 좋다

  indexBuildRetry: <boolean>
#index 생성이 비정상적으로 중단된 상태로 MongoDB 서버가 재시작될때 인덱스 생성을 자동으로 시작할 것인지 결정

  repairPath: <string>
#MongoDB 서버를 --repair 옵션과 함께 시작할 때 데이터베이스 복구(repair) 쓰레드가 사용하는 임시 디렉토리 설정

  directoryPerDB: <boolean>
#MongoDB 서버가 데이터베이스 단위로 디렉토리를 생성할지, 아니면 dbPath에 설정된 모든 데이터 파일을 저장할지 결정. true로 설정하면 데이터베이스 단위로 디렉토리 생성

  syncPeriodSecs: <int>
#MongoDB의 스토리지 엔진은 direct-io를 사용하지 않기 때문에 MongoDB의 데이터 쓰기는 일반적으로 운영체제의 캐시메모리에 남아있을 가능성이 크다. 그래서 MongoDB서버는 주기적으로 캐시의 더티페이지(디스크로 기록되지 않은 데이터)를 디스크로 플러시(동기화)하는데, 이 옵션은 동기화를 어느 주기로 실행할 것인지 결정. 일반적으로 저널로그를 활성화한 경우 데이터 파일이 손실되더라도 자동 복구가 가능하므로 이 설정 자체는 중요한 역할을 하지는 않음



  journal:        -> 저널 로그를 활성화 할 것인지 결정
    enabled: true    
#저널링 사용 여부. 정전시 손실되어 디스크에 동기화되지 않은 데이터를 저장할 수 있으므로 이 기능을 활성화 하는 것이 좋다 (64비트 시스템에서는 기본값이 true). false로 설정하면 저널로그(트랜잭션 로그)를 디스크에 기록하지 않음.

  commitIntervalMs: <num>
#저널로그를 어느 주기로 디스크에 동기화 할 것인지 결정. MongoDB서버에서는 트랜잭션 단위로 저널로그를 디스크에 동기화하지 않기 때문에 트랜잭션과 상관없이 이 옵션에 설정한 밀리초 단위로 저널로그를 디스크에 동기화함
 


  engine: "wiredTiger"  #사용할 스토리지 엔진 (MongoDB에서는 하나의 인스턴스에서 여러 종류의 스토리지 엔진 동시 사용 불가능. 3.0버전에서만 MMAPv1롸 WiredTiger동시에 사용가능(과도기 버전))
#  mmapv1:

  wiredTiger:   #WiredTiger 관련 옵션이 설정된 곳(engineConfig, collectionConfig, indexConfig 각각 오브젝트 범위별로 설정 가능)
      engineConfig:  -> WiredTiger스토리지엔진의 전역 설정
         cacheSizeGB: <number>   
#WiredTiger가 인메모리 데이터용으로 비축해야 하는 램 메모리의 양. 그러면 메모리 데이터가 캐시로 사용되어 데이터를 신속하게 제공. 기본값은 시스템의 물리 램의 절반으로, 최소 1GB (GB 단위로 세팅.256MB~10TB). WiredTiger스토리지 엔진의 공유 캐시가 어느정도의 메모리를 사용하게 할 것인지 설정. 기본적으로 서버의 메모리의 50~60% 정도 설정.


          journalCompressor: <string>
#저널링 데이터에 사용할 압축기의 종류를 WiredTiger에 알려준다. snappy를 기본값으로 사용하지만 최상의 성능을 얻으려면 none으로 설정하는 것이 가장 좋다

         directoryForIndexes: <boolean>
#default는 false.
#true로 세팅시에는 mongod는 dbPath로 지정한 경로 아래로 index들과 collection 들을 분리하여 subdirectory를 생성하고 각각의 subdirectory에 저장한다.

      collectionConfig: -> 콜렉션에만 설정되는 옵션 
         blockCompressor: <string>
#WiredTiger에게 수집 데이터에 사용할 압축기의 종류를 알려준다. 지원되는 세가지 옵션은 none, snappy, zlib이다.
벤치마크에서 가장 적합한 옵션을 확인할 수 있다. 기본 설정은 snappy.
#collection의 데이터의 압축에 대한 설정. journalCompressor와 마찬가지로 세팅. 이 압축은 collection 생성시 오버라이드 될 수 있음. 
만약 이전에 snappy로 지정하고 생성된 collection이 있는 DB에 대해서 zlib로 변경하는 경우가 생긴다면, 이전에 생성된 collection 들은 snappy로 압축하고 새로 생성되는 collection에 대해서 zlib로 압축한다.
WiredTiger스토리지 엔진의 데이터파일을 압축할 것인지, 압축한다면 어떤 알고리즘을 선택할 것인지 결정하는 옵션. 현재는 zlib와 snappy로 압축 알고리즘을 설정할 수 있고 압축하지 않으려면 "none"으로 설정하면 된다.


      indexConfig: -> 인덱스에만 설정되는 옵션
         prefixCompression: <boolean>
#WiredTiger가 인덱스 데이터에 압축을 사용할 것인지 여부를 알려준다. 기본값은 true.
# WiredTiger의 인덱스는 기본적으로 데이터블록(페이지) 단위의 압축은 지원하지 않고 프리픽스 압축을 지원하는데, 인덱스의 프리픽스 압축을 사용할 것인지 결정. (인덱스에서도 페이지 기반의 압축을 사용할 수는 있음)

# how the process runs
processManagement:
  fork: true  # fork and run in background  #백그라운드에 daemon 형태로 뜨게하는 옵션. default는 false. mongod, mongos는 기본적으로 daemon 형태로 뜨지 않음. 
  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile
  timeZoneInfo: /usr/share/zoneinfo   #타임존 데이터를 지정 (default : /usr/share/zoneinfo) MongoDB 배포 일정마다 최신 데이터로 업데이트됨

# network interfaces
net:
  port: 27017
  bindIp: 127.0.0.1  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.


setParameter:   #mongoDB Server의 매개변수를 세팅
   enableLocalhostAuthBypass: false   #로컬호스트에서 인증을 할지에 대한 설정 (default : true)


#security:

#operationProfiling:

#replication:

#sharding:

## Enterprise-Only Options

#auditLog:

#snmp:


